import os
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from data import MENU
from flask import Flask, request
from threading import Thread
import requests
import time

TOKEN = os.environ['TOKEN']
user_history = {}

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ï–¥–∏–Ω—ã–π URL –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤–æ–∑—å–º–∏—Ç–µ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ "Web" –≤ Replit)
REPLIT_URL = "https://TelegramBOT--sasharikkert9.repl.co"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô!

@app.route('/')
def home():
    return "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω! –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"

@app.route('/ping')
def ping():
    return "pong", 200

def run_flask():
    try:
        app.run(host='0.0.0.0', port=3000)
    except OSError:
        app.run(host='0.0.0.0', port=3001)  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç

def self_ping():
    while True:
        try:
            requests.get(f"{REPLIT_URL}/ping", timeout=5)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ ping: {str(e)[:100]}...")
        time.sleep(240)

def escape_html(text):
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_history[chat_id] = ["start"]
    await show_menu(update.message, "start")

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = update.effective_chat.id
    button_data = query.data

    if button_data == "–ù–∞–∑–∞–¥":
        if len(user_history[chat_id]) > 1:
            user_history[chat_id].pop()
            previous_menu = user_history[chat_id][-1]
            await show_menu(query.message, previous_menu)
        else:
            await show_menu(query.message, "start")
    else:
        user_history[chat_id].append(button_data)
        await show_menu(query.message, button_data)

async def show_menu(message, menu_name):
    menu = MENU.get(menu_name, {
        "text": "üöß –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "buttons": [["–ù–∞–∑–∞–¥"]]
    })

    parse_mode = ParseMode.HTML if menu.get("parse_mode") == "HTML" else None
    text = menu.get("text", "")

    if parse_mode != ParseMode.HTML:
        text = escape_html(text)

    keyboard = [
        [InlineKeyboardButton(btn, callback_data=btn) for btn in row]
        for row in menu.get("buttons", [])
    ]

    try:
        if menu.get("image"):
            await message.reply_photo(
                photo=menu["image"],
                caption=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=parse_mode
            )
        else:
            await message.reply_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=parse_mode
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        await message.reply_text(
            text=menu.get("text", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"),
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def post_init(application: Application):
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ URL: {REPLIT_URL}")
    print(f"üëâ –¢–µ—Å—Ç–æ–≤—ã–π URL: {REPLIT_URL}/ping")

def main():
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    Thread(target=run_flask, daemon=True).start()

    # –ó–∞–ø—É—Å–∫ self-ping
    Thread(target=self_ping, daemon=True).start()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))

    # –ó–∞–ø—É—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()
